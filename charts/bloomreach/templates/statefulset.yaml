apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "bloomreach.fullname" . }}
  labels:
    {{- include "bloomreach.labels" . | nindent 4 }}
spec:
  serviceName: {{ $.Release.Name }}
  replicas: {{ $.Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "bloomreach.selectorLabels" . | nindent 6 }}
  volumeClaimTemplates:
    {{- range $.Values.volumeClaims }}
    - metadata:
        name: {{ .name | quote}}
      spec:
        accessModes: [ "ReadWriteOnce" ]
        storageClassName: {{ .storageClassName }}
        selector:
          matchLabels:
            application: {{ $.Values.global.applicationName | quote}}
            env: {{ $.Values.global.env | quote  }}
            type: {{ .type | quote}}
        resources:
          requests:
            storage: {{ .size | quote}}
    {{- end }}
  template:
    metadata:
      labels:
        {{- include "bloomreach.selectorLabels" . | nindent 8 }}
    spec:
    {{- with $.Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
    {{- end }}
      serviceAccountName: {{ include "bloomreach.serviceAccountName" . }}
      securityContext:
        {{- toYaml $.Values.podSecurityContext | nindent 8 }}
      terminationGracePeriodSeconds: {{ $.Values.terminationGracePeriodSeconds }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml $.Values.securityContext | nindent 12 }}
          image: "{{ $.Values.image.repository }}:{{ $.Values.image.version }}"
          imagePullPolicy: {{ $.Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          env:
            {{- range  $.Values.envFromSecert }}
            - name: {{ .name | quote }}
              valueFrom:
                secretKeyRef:
                  name: {{ .secretName | quote}}
                  key: {{ .secretKey | quote}}
            {{- end }}
            {{- range  $.Values.envFromConfigMap }}
            - name: {{ .name | quote }}
              valueFrom:
                configMapKeyRef:
                  name: {{ .configmapName | quote}}
                  key: {{ .configmapKey | quote}}
            {{- end }}
            {{- range  $key, $value := $.Values.env }}
            - name: {{ $key | quote}}
              value: {{  $value | quote }}
             {{- end }}
          livenessProbe:
            httpGet:
              port: 8080
              path: {{ $.Values.livenessProbe.path | quote }}
            initialDelaySeconds: {{ $.Values.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ $.Values.livenessProbe.periodSeconds }}
            failureThreshold: {{ $.Values.livenessProbe.failureThreshold }}
            timeoutSeconds: {{ $.Values.livenessProbe.timeoutSeconds }}
            successThreshold: {{ $.Values.livenessProbe.successThreshold }}
          readinessProbe:
            httpGet:
              port: 8080
              path: {{ $.Values.readinessProbe.path | quote }}
            initialDelaySeconds: {{ $.Values.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ $.Values.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ $.Values.readinessProbe.timeoutSeconds }}
            failureThreshold: {{ $.Values.readinessProbe.failureThreshold }}
            successThreshold: {{ $.Values.readinessProbe.successThreshold }}
          volumeMounts:
            {{- range $.Values.volumeClaims }}
            - name: {{ .name }}
              mountPath: {{ .mountPath }}
            {{- end }}
            {{- range $.Values.mountFileFromSecrect }}
            - name: {{ .name | quote }}
              subPath: {{ .fileName | quote }}
              mountPath: "{{ .folder }}/{{ .fileName }}"
              readOnly: true
            {{- end }}
          resources:
            limits:
              cpu: {{ $.Values.resources.limits.cpu | quote }}
              memory: {{ $.Values.resources.limits.memory | quote }}
            requests:
              cpu: {{ $.Values.resources.requests.cpu | quote }}
              memory: {{ $.Values.resources.limits.memory | quote }}
      {{- if len $.Values.mountFileFromSecrect | ne  0 }}
      volumes:
        {{- range $.Values.mountFileFromSecrect }}
        - name: {{ .name | quote }}
          secret:
            secretName: {{ .secretName | quote }}
            items:
              - key: {{ .secretKey | quote }}
                path: "./{{ .fileName }}"
        {{- end }}
      {{- end }}
      {{- with $.Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    {{- with $.Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with $.Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
